declare const existPath: (filepath: string) => Promise<boolean>;
declare const makeDirectory: (dirpath: string) => Promise<string | undefined>;
declare const readFileText: (filepath: string) => Promise<string>;
declare const readFileBinary: (filepath: string) => Promise<string>;
declare const readFileJson: (filepath: string) => Promise<any>;
declare const writeFileText: (filepath: string, data: any) => Promise<void>;
declare const writeFileBinary: (filepath: string, data: any) => Promise<void>;
declare const getStringFromJson: (json: string) => string;
declare const getJsonFromString: (string: string) => any;
declare const writeFileJson: (filepath: string, json: any) => Promise<void>;
declare const getDirectoryName: (filepath: string) => string;
declare const getExtension: (filepath: string) => string;
declare const getFileName: (filepath: string) => string;
declare const getFileNameWithoutExtension: (filepath: string) => string;
declare const getChunkFromArray: (array: any[], size: number) => any;
declare const getHtmlFromUrl: (url: string) => Promise<any>;
declare const replaceString: (inStr: string, n: number, newStr: string) => string;
declare const getCsvFromJson: (json: any) => string;
declare const getTsvFromJson: (json: any) => string;
declare const removeDuplicatesFromArray: (array: any[]) => any[];
declare const getJapaneseIsoStringFromUtcIsoString: (utc: string) => string;
declare const equalArray: (array1: any[], array2: any[]) => boolean;
declare const sleep: (ms: number) => Promise<unknown>;
declare const sortJson: (json: any) => {
    [k: string]: unknown;
};
declare class Youtube {
    #private;
    constructor(apiKey: string);
    static removeEtagFromApiData(apiData: any): any;
    static getDescriptionFromApiData(apiData: any): any;
    static getTitleFromApiData(apiData: any): any;
    static getPublishedAtFromApiData(apiData: any): any;
    static getThumbnailFromApiData(apiData: any): any;
    static getThumbnailFromChannelApiData(channelApiData: any): any;
    static getThumbnailFromVideoApiData(videoApiData: any): any;
    static getThumbnailFromVideoId(videoId: string): string;
    static getChannelIdFromChannelApiData(channelApiData: any): any;
    static getChannelIdFromVideoApiData(videoApiData: any): any;
    static getChannelIdFromCustomUrl(url: any): Promise<string>;
    static getChannelIdFromHtml(html: string): string;
    static getChannelIdFromUrl(url: string): string;
    static getChannelIdFromUploadPlaylistId: (uploadPlaylistId: string) => string;
    static getVideoIdFromVideoApiData(videoApiData: any): any;
    static getVideoIdFromPlaylistItemsApiData(apiData: any): any;
    static getVideoIdFromVideoUrl(url: string): string;
    static getTitleFromVideoApiData(videoApiData: any): any;
    static getPublishedAtFromVideoApiData(videoApiData: any): any;
    static getStartTimeFromVideoApiData(videoApiData: any): any;
    static getEndTimeFromVideoApiData(videoApiData: any): any;
    static getViewCountFromVideoApiData(videoApiData: any): any;
    static getViewCountFromChannelApiData(channelApiData: any): any;
    static getLikeCountFromVideoApiData(videoApiData: any): any;
    static getVideoCountFromChannelApiData(channelApiData: any): any;
    static getSubscriberCountFromChannelApiData(channelApiData: any): any;
    static getBannerFromChannelApiData(channelApiData: any): any;
    static getVideoUrlFromPlaylistItemsApiData(apiData: any): string;
    static searchChannelIdFromText(text: string): any[];
    static searchCustomUrlFromText(text: string): RegExpMatchArray;
    static getUploadPlaylistIdFromChannelId: (channelId: string) => string;
    static getChannelUrlFromChannelId(channelId: string): string;
    static getVideoUrlFromVideoId(videoId: string): string;
    static getAtChannelIdListFromHtml(html: string): any[];
    static getHashTagListFromHtml(html: string): any[];
    static getGameTitleFromHtml(text: string): any;
    static getGameTitleFromUrl(url: string): Promise<any>;
    static getGameTitleFromVideoId(videoId: string): Promise<any>;
    getCommentThreads(videoId: string, part?: string[]): Promise<any[]>;
    getVideos(videoIdList: string[], part?: string[]): Promise<any[]>;
    getChannels(channelIdList: string[], part?: string[]): Promise<any[]>;
    getPlaylistItems(playlistId: string[], part?: string[]): Promise<any[]>;
    getPlaylists(channelId: string, part?: string[]): Promise<any[]>;
}
declare class Notion {
    #private;
    constructor(apiKey: string);
    makeDatabase(query: any): Promise<import("@notionhq/client/build/src/api-endpoints").CreateDatabaseResponse>;
    makePage(query: any): Promise<import("@notionhq/client/build/src/api-endpoints").CreatePageResponse>;
    getDatabase(query: any): Promise<import("@notionhq/client/build/src/api-endpoints").GetDatabaseResponse>;
    getDatabaseFromId(id: string): Promise<import("@notionhq/client/build/src/api-endpoints").GetDatabaseResponse>;
    getPage(query: any): Promise<import("@notionhq/client/build/src/api-endpoints").GetPageResponse>;
    getPageFromId(id: string): Promise<import("@notionhq/client/build/src/api-endpoints").GetPageResponse>;
    updatePage(query: any): Promise<import("@notionhq/client/build/src/api-endpoints").UpdatePageResponse>;
    static getIdFromUrl(urlString: string): string;
    static getIdFromApiResponse(response: any): any;
}
export { existPath, makeDirectory, readFileText, readFileBinary, readFileJson, writeFileText, writeFileBinary, writeFileJson, getDirectoryName, getExtension, getFileName, getFileNameWithoutExtension, getStringFromJson, getJsonFromString, getHtmlFromUrl, getChunkFromArray, getCsvFromJson, getTsvFromJson, replaceString, removeDuplicatesFromArray, getJapaneseIsoStringFromUtcIsoString, equalArray, sleep, sortJson, Youtube, Notion, };
//# sourceMappingURL=index.d.ts.map