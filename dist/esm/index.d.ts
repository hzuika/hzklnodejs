/// <reference types="node" />
import { youtube_v3 } from "googleapis";
import { CreateDatabaseParameters, CreateDatabaseResponse, CreatePageParameters, CreatePageResponse, GetDatabaseParameters, GetDatabaseResponse, GetPageParameters, GetPageResponse, UpdateDatabaseResponse, UpdatePageParameters, UpdatePageResponse } from "@notionhq/client/build/src/api-endpoints";
declare const existPath: (filepath: string) => Promise<boolean>;
declare const makeDirectory: (dirpath: string) => Promise<string | undefined>;
declare const readFileText: (filepath: string) => Promise<string>;
declare const readFileBinary: (filepath: string) => Promise<string>;
declare const readFileJson: (filepath: string) => Promise<any>;
declare const writeFileText: (filepath: string, data: string) => Promise<void>;
declare const writeFileBinary: (filepath: string, data: Buffer) => Promise<void>;
declare const getStringFromJson: (json: object) => string;
declare const getJsonFromString: (string: string) => any;
declare const writeFileJson: (filepath: string, json: object) => Promise<void>;
declare const getDirectoryName: (filepath: string) => string;
declare const getExtension: (filepath: string) => string;
declare const getFileName: (filepath: string) => string;
declare const getFileNameWithoutExtension: (filepath: string) => string;
declare const getChunkFromArray: <T>(array: T[], size: number) => T[][];
declare const getHtmlFromUrl: (url: string) => Promise<any>;
declare const replaceString: (inStr: string, n: number, newStr: string) => string;
declare const getCsvFromJson: (json: object[]) => string;
declare const getTsvFromJson: (json: object[]) => string;
declare const removeDuplicatesFromArray: <T>(array: T[]) => T[];
declare const getJapaneseIsoStringFromUtcIsoString: (utc: string) => string;
declare const equalArray: <T>(array1: T[], array2: T[]) => boolean;
declare const sleep: (ms: number) => Promise<unknown>;
declare const sortJson: (json: object) => {
    [k: string]: any;
};
declare type YoutubeVideoApiData = youtube_v3.Schema$Video;
declare type YoutubeChannelApiData = youtube_v3.Schema$Channel;
declare type YoutubePlaylistApiData = youtube_v3.Schema$Playlist;
declare type YoutubePlaylistItemApiData = youtube_v3.Schema$PlaylistItem;
declare type YoutubeApiData = YoutubeVideoApiData | YoutubeChannelApiData | YoutubePlaylistApiData | YoutubePlaylistItemApiData;
declare class Youtube {
    #private;
    constructor(apiKey: string);
    getCommentThreads(videoId: string, part?: string[]): Promise<YoutubeApiData[]>;
    getVideos(videoIdList: string[], part?: string[]): Promise<YoutubeApiData[]>;
    getChannels(channelIdList: string[], part?: string[]): Promise<YoutubeApiData[]>;
    getPlaylistItems(playlistId: string, part?: string[]): Promise<YoutubeApiData[]>;
    getPlaylists(channelId: string, part?: string[]): Promise<YoutubeApiData[]>;
    static getChannelIdFromVideoApiData(videoApiData: YoutubeVideoApiData): string | null | undefined;
    static getVideoIdFromVideoApiData(videoApiData: YoutubeVideoApiData): string | null | undefined;
    static getTitleFromVideoApiData(videoApiData: YoutubeVideoApiData): string | null | undefined;
    static getDescriptioFromVideoApiData(videoApiData: YoutubeVideoApiData): string | null | undefined;
    static getPublishedAtFromVideoApiData(videoApiData: YoutubeVideoApiData): string | null | undefined;
    static getStartTimeFromVideoApiData(videoApiData: YoutubeVideoApiData): string | null | undefined;
    static getEndTimeFromVideoApiData(videoApiData: YoutubeVideoApiData): string | null | undefined;
    static getViewCountFromVideoApiData(videoApiData: YoutubeVideoApiData): string | null | undefined;
    static getLikeCountFromVideoApiData(videoApiData: YoutubeVideoApiData): string | null | undefined;
    static getChannelIdFromChannelApiData(channelApiData: YoutubeChannelApiData): string | null | undefined;
    static getTitleFromChannelApiData(channelApiData: YoutubeChannelApiData): string | null | undefined;
    static getPublishedAtFromChannelApiData(channelApiData: YoutubeChannelApiData): string | null | undefined;
    static getThumbnailFromChannelApiData(channelApiData: YoutubeChannelApiData): string | null | undefined;
    static getViewCountFromChannelApiData(channelApiData: YoutubeChannelApiData): string | null | undefined;
    static getVideoCountFromChannelApiData(channelApiData: YoutubeChannelApiData): string | null | undefined;
    static getSubscriberCountFromChannelApiData(channelApiData: YoutubeChannelApiData): string | null | undefined;
    static getBannerFromChannelApiData(channelApiData: YoutubeChannelApiData): string | null | undefined;
    static getTitleFromPlaylistApiData(apiData: YoutubePlaylistApiData): string | null | undefined;
    static getPlaylistIdFromPlaylistApiData(apiData: YoutubePlaylistApiData): string | null | undefined;
    static getVideoIdFromPlaylistItemApiData(apiData: YoutubePlaylistItemApiData): string | null | undefined;
    static getVideoUrlFromPlaylistItemsApiData(apiData: YoutubePlaylistItemApiData): string;
    static getThumbnailFromVideoId(videoId: string): string;
    static getVideoIdFromVideoUrl(url: string): string;
    static getVideoUrlFromVideoId(videoId: string): string;
    static getChannelIdFromUrl(url: string): string;
    static getChannelIdFromUploadPlaylistId: (uploadPlaylistId: string) => string;
    static getChannelUrlFromChannelId(channelId: string): string;
    static searchChannelIdFromText(text: string): string[];
    static searchCustomUrlFromText(text: string): RegExpMatchArray;
    static getUploadPlaylistIdFromChannelId(channelId: string): string;
    static getPlaylistUrlFromPlaylistId(playlistId: string): string;
    static removeEtagFromApiData(apiData: YoutubeApiData): YoutubeApiData;
}
declare class Notion {
    #private;
    constructor(apiKey: string);
    makeDatabase(query: CreateDatabaseParameters): Promise<CreateDatabaseResponse>;
    makePage(query: CreatePageParameters): Promise<CreatePageResponse>;
    getDatabase(query: GetDatabaseParameters): Promise<GetDatabaseResponse>;
    getDatabaseFromId(id: string): Promise<GetDatabaseResponse>;
    getPage(query: GetPageParameters): Promise<GetPageResponse>;
    getPageFromId(id: string): Promise<GetPageResponse>;
    updatePage(query: UpdatePageParameters): Promise<UpdatePageResponse>;
    static getIdFromUrl(urlString: string): string;
    static getIdFromApiResponse(response: GetPageResponse | GetDatabaseResponse | CreatePageResponse | CreateDatabaseResponse | UpdatePageResponse | UpdateDatabaseResponse): string;
}
export { existPath, makeDirectory, readFileText, readFileBinary, readFileJson, writeFileText, writeFileBinary, writeFileJson, getDirectoryName, getExtension, getFileName, getFileNameWithoutExtension, getStringFromJson, getJsonFromString, getHtmlFromUrl, getChunkFromArray, getCsvFromJson, getTsvFromJson, replaceString, removeDuplicatesFromArray, getJapaneseIsoStringFromUtcIsoString, equalArray, sleep, sortJson, Youtube, Notion, };
//# sourceMappingURL=index.d.ts.map